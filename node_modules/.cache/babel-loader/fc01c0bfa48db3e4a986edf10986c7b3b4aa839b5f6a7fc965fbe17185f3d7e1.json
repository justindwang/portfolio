{"ast":null,"code":"var _jsxFileName = \"/Users/justin/portfolio/src/pages/LandingPages/Author/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport { Switch } from \"@mui/material\";\nimport theme from \"assets/theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkModeToggle = () => {\n  _s();\n  if (typeof window === \"undefined\") {\n    // Never server-side render this, since we can't determine\n    // the correct initial state until we get to the client.\n    // Alternatively, use a loading placeholder here.\n    return null;\n  }\n\n  // const [checked, setChecked] = useState(window.__theme === \"dark\");\n  const [checked, setChecked] = useState(false);\n  const onChange = useCallback(e => {\n    const isChecked = e.target.checked;\n    setChecked(isChecked);\n    // window.__setPreferredTheme(isChecked ? \"dark\" : \"light\");\n    console.log(isChecked);\n    console.log(theme);\n    theme.palette.type = \"dark\";\n  }, [setChecked]);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    checked: checked,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_s(DarkModeToggle, \"qzA8l2W9pKWPNPEM2bXGrW37rDA=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useCallback","useState","Switch","theme","jsxDEV","_jsxDEV","DarkModeToggle","_s","window","checked","setChecked","onChange","e","isChecked","target","console","log","palette","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/justin/portfolio/src/pages/LandingPages/Author/DarkModeToggle.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { Switch } from \"@mui/material\";\n\nimport theme from \"assets/theme\";\n\nconst DarkModeToggle = () => {\n  if (typeof window === \"undefined\") {\n    // Never server-side render this, since we can't determine\n    // the correct initial state until we get to the client.\n    // Alternatively, use a loading placeholder here.\n    return null;\n  }\n\n  // const [checked, setChecked] = useState(window.__theme === \"dark\");\n  const [checked, setChecked] = useState(false);\n\n  const onChange = useCallback(\n    (e) => {\n      const isChecked = e.target.checked;\n      setChecked(isChecked);\n      // window.__setPreferredTheme(isChecked ? \"dark\" : \"light\");\n      console.log(isChecked);\n      console.log(theme);\n      theme.palette.type = \"dark\";\n    },\n    [setChecked]\n  );\n\n  return <Switch checked={checked} onChange={onChange} />;\n};\n\nexport default DarkModeToggle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,MAAM,QAAQ,eAAe;AAEtC,OAAOC,KAAK,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC;IACA;IACA;IACA,OAAO,IAAI;EACb;;EAEA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMU,QAAQ,GAAGX,WAAW,CACzBY,CAAC,IAAK;IACL,MAAMC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACL,OAAO;IAClCC,UAAU,CAACG,SAAS,CAAC;IACrB;IACAE,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IACtBE,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;IAClBA,KAAK,CAACc,OAAO,CAACC,IAAI,GAAG,MAAM;EAC7B,CAAC,EACD,CAACR,UAAU,CACb,CAAC;EAED,oBAAOL,OAAA,CAACH,MAAM;IAACO,OAAO,EAAEA,OAAQ;IAACE,QAAQ,EAAEA;EAAS;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzD,CAAC;AAACf,EAAA,CAxBID,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}